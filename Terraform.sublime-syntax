%YAML 1.2
#
# This syntax definition is based on the Terraform guide:
# https://www.terraform.io/docs/configuration/index.html
#
# As well as the HCL Native Syntax Spec:
# https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md
#
# For documentation on the .subline-syntax format:
# https://www.sublimetext.com/docs/3/syntax.html
#
# Regex's in this file support the Oniguruma regex engine:
# https://raw.githubusercontent.com/kkos/oniguruma/5.9.6/doc/RE
#
---
name: Terraform

# File Extensions:
#
# - ".tf": the standard file extension
#   https://www.terraform.io/docs/configuration/index.html#code-organization
#
# - ".tfvars": variables definitions file
#   https://www.terraform.io/docs/configuration/variables.html#variable-definitions-tfvars-files
#
# - ".hcl": non-terraform tools often use this HCL syntax, i.e. Vault
#   https://www.vaultproject.io/docs/configuration/
file_extensions:
  - tf
  - tfvars
  - hcl
scope: source.terraform

variables:
  # Identifiers: (UTF-8) (ID_Continue | '-')*;
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#identifiers
  identifer: \b[[:alpha:]][[:alnum:]_-]*\b

  # Exponent: "e" or "E" followed by an optional sign
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#numeric-literals
  exponent: ([Ee][+-]?)

  # Character Escapes:
  #
  #   - \n: newline
  #   - \r: carriage return
  #   - \t: tab
  #   - \": quote
  #   - \\: backslash
  #   - \uNNNN: unicode char (NNNN is 4 hex digits)
  #   - \uNNNNNNNN: unicode char (NNNNNNNN us 8 digits)
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#template-expressions
  char_escapes: \\[nrt"\\]|\\u(\h{8}|\h{4})

contexts:
  main:
    - include: block-comments
    - include: inline-comments
    - include: literal-values
    - include: operators

  #   - match: '(resource|data)\s+(")?(\w+)(")?\s+(")?([\w\-]+)(")?\s+({)'
  #     scope: meta.resource.terraform
  #     captures:
  #       1: storage.type.function.terraform
  #       2: string.terraform punctuation.definition.string.begin.terraform
  #       3: string.value.terraform
  #       4: string.terraform punctuation.definition.string.end.terraform
  #       5: string.terraform punctuation.definition.string.begin.terraform
  #       6: string.value.terraform
  #       7: string.terraform punctuation.definition.string.end.terraform
  #       8: punctuation.definition.tag.terraform
  #   - match: '(provider|provisioner|variable|output|module|atlas)\s+(")?([\w\-]+)(")?\s+({)'
  #     scope: meta.block.terraform
  #     captures:
  #       1: storage.type.function.terraform
  #       2: string.terraform punctuation.definition.string.begin.terraform
  #       3: string.value.terraform
  #       4: string.terraform punctuation.definition.string.end.terraform
  #       5: punctuation.definition.tag.terraform
  #   - match: '([\w_-]+)\s*(=)\s*'
  #     comment: Value assignments (left hand side not in double quotes)
  #     captures:
  #       1: variable.other.assignment.terraform
  #       2: keyword.operator.terraform
  #   - match: '(")([\w_-]+)(")\s*(=)\s*'
  #     comment: Value assignments (left hand side in double quotes)
  #     captures:
  #       1: punctuation.quote.double.terraform
  #       2: variable.assignment.terraform
  #       3: punctuation.quote.double.terraform
  #       4: keyword.operator.terraform
  #   - match: '([\w\-_]+)\s+({)'
  #     comment: Maps
  #     captures:
  #       1: entity.name.section.terraform
  #       2: punctuation.definition.tag.terraform
  #   - match: (?>\s*<<(\w+))
  #     captures:
  #       0: punctuation.definition.string.begin.terraform
  #       1: keyword.operator.heredoc.terraform
  #     push:
  #       - meta_scope: string.unquoted.heredoc.terraform
  #       - match: ^\s*\1$
  #         captures:
  #           0: punctuation.definition.string.end.terraform keyword.operator.heredoc.terraform
  #         pop: true

  # Literal Values: Numbers, Language Constants, and Strings
  #
  #   Strings are _technically_ part of the "expression sub-language",
  #   but make the most sense to be part of this stack.
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#literal-values
  literal-values:
    - include: numeric-literals
    - include: language-constants
    - include: string-literals

  # Inline Comments: begin at the operator, end at the end of the line.
  #
  # https://www.terraform.io/docs/configuration/syntax.html#comments
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#comments-and-whitespace
  inline-comments:
    - match: '#|//'
      comment: Inline Comments
      scope: punctuation.definition.comment.terraform
      push:
        - meta_scope: comment.line.terraform
        - match: $\n?
          scope: punctuation.definition.comment.terraform
          pop: true

  # Block comments: start and end delimiters for multi-line comments.
  #
  # https://www.terraform.io/docs/configuration/syntax.html#comments
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#comments-and-whitespace
  block-comments:
    - match: /\*
      comment: Block comments
      scope: punctuation.definition.comment.terraform
      push:
        - meta_scope: comment.block.terraform
        - match: \*/
          scope: punctuation.definition.comment.terraform
          pop: true

  # Language Constants: booleans and `null`.
  #
  # https://www.terraform.io/docs/configuration/expressions.html#literal-expressions
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#literal-values
  language-constants:
    - match: \b(true|false|null)\b
      comment: Language Constants
      scope: constant.language.terraform

  # Numbers: Integers, fractions and exponents
  #
  # https://www.terraform.io/docs/configuration/expressions.html#types-and-values
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#numeric-literals
  numeric-literals:
    - match: \d+({{exponent}})\d+
      comment: Integer, no fraction, optional exponent
      scope: constant.numeric.float.terraform
      captures:
        1: punctuation.separator.exponent.terraform
    - match: \d+(\.)\d+(?:({{exponent}})\d+)?
      comment: Integer, fraction, optional exponent
      scope: constant.numeric.float.terraform
      captures:
        1: punctuation.separator.decimal.terraform
        2: punctuation.separator.exponent.terraform
    - match: \d+
      comment: Integers
      scope: constant.numeric.integer.terraform

  # Strings:
  #
  #   TODO: add heredocs
  #
  # https://www.terraform.io/docs/configuration/expressions.html#types-and-values
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#template-expressions
  string-literals:
    - match: '"'
      scope: punctuation.definition.string.begin.terraform
      push:
        - meta_scope: string.quoted.double.terraform
        - match: '"'
          scope: punctuation.definition.string.end.terraform
          pop: true
        - include: string-interpolation
        - match: '{{char_escapes}}'
          comment: Character Escapes
          scope: constant.character.escape.terraform

  # String Interpolation: ("${" | "${~") Expression ("}" | "~}"
  #
  #   TODO: include built-in function
  #   TODO: include operators
  #   TODO: include builtin variables
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#templates
  string-interpolation:
    - match: (\$|\%)\{
      scope: punctuation.section.interpolation.begin.terraform
      push:
        - meta_scope: meta.interpolation.terraform
        - clear_scopes: 1 # Clear the string.* scope.
        - match: \}
          scope: punctuation.section.interpolation.end.terraform
          pop: true
        - match: \~\s
          comment: Trim left whitespace
          scope: keyword.operator.template.left.trim.terraform
        - match: \s\~
          comment: Trim right whitespace
          scope: keyword.operator.template.right.trim.terraform
        - match: \b(if|else|endif|for|in|endfor)\b
          comment: if/else/endif and for/in/endfor directives
          scope: keyword.control.terraform
        - include: literal-values

  # Operators:
  #
  #   TODO: curly braces
  #   TODO: array brackets
  #   TODO: commas
  #   TODO: dot access operator
  #   TODO: parenthesis
  #   TODO: asterisk in ".*" and "[*]"
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#operators-and-delimiters
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#operations
  operators:
    - match: \>\=
      scope: keyword.operator.terraform
    - match: \<\=
      scope: keyword.operator.terraform
    - match: \=\=
      scope: keyword.operator.terraform
    - match: \!\=
      scope: keyword.operator.terraform
    - match: \=
      scope: keyword.operator.assignment.terraform
    - match: \+
      scope: keyword.operator.arithmetic.terraform
    - match: \-
      scope: keyword.operator.arithmetic.terraform
    - match: \*
      scope: keyword.operator.arithmetic.terraform
    - match: \/
      scope: keyword.operator.arithmetic.terraform
    - match: \%
      scope: keyword.operator.arithmetic.terraform
    - match: \&\&
      scope: keyword.operator.logical.terraform
    - match: \|\|
      scope: keyword.operator.logical.terraform
    - match: \!
      scope: keyword.operator.logical.terraform
    - match: \>
      scope: keyword.operator.terraform
    - match: \<
      scope: keyword.operator.terraform
    - match: \?
      scope: keyword.operator.terraform
    - match: "\\:"
      scope: keyword.operator.terraform
    - match: \.\.\.
      scope: keyword.operator.terraform
%YAML 1.2
#
# This syntax definition is based on the Terraform guide:
# https://www.terraform.io/docs/configuration/index.html
#
# As well as the HCL Native Syntax Spec:
# https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md
#
# For documentation on the .subline-syntax format:
# https://www.sublimetext.com/docs/3/syntax.html
#
# Regex's in this file support the Oniguruma regex engine:
# https://raw.githubusercontent.com/kkos/oniguruma/5.9.6/doc/RE
#
---
name: Terraform

# File Extensions:
#
# - ".tf": the standard file extension
#   https://www.terraform.io/docs/configuration/index.html#code-organization
#
# - ".tfvars": variables definitions file
#   https://www.terraform.io/docs/configuration/variables.html#variable-definitions-tfvars-files
#
# - ".hcl": non-terraform tools often use this HCL syntax, i.e. Vault
#   https://www.vaultproject.io/docs/configuration/
file_extensions:
  - tf
  - tfvars
  - hcl
scope: source.terraform

variables:
  # Identifiers: (UTF-8) (ID_Continue | '-')*;
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#identifiers
  identifer: \b[[:alpha:]][[:alnum:]_-]*\b

  # Exponent: "e" or "E" followed by an optional sign
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#numeric-literals
  exponent: ([Ee][+-]?)

  # Character Escapes:
  #
  #   - \n: newline
  #   - \r: carriage return
  #   - \t: tab
  #   - \": quote
  #   - \\: backslash
  #   - \uNNNN: unicode char (NNNN is 4 hex digits)
  #   - \uNNNNNNNN: unicode char (NNNNNNNN us 8 digits)
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#template-expressions
  char_escapes: \\[nrt"\\]|\\u(\h{8}|\h{4})

  # Built-In Functions
  #
  # https://www.terraform.io/docs/configuration/functions.html
  predeclared_funcs: abs|ceil|floor|log|max|min|pow|signum|chomp|format|formatlist|indent|join|lower|regex|regexall|replace|split|strrev|substr|title|trimspace|upper|chunklist|coalesce|coalescelist|compact|concat|contains|distinct|element|flatten|index|keys|length|list|lookup|map|matchkeys|merge|range|reverse|setintersection|setproduct|setunion|slice|sort|transpose|values|zipmap|base64decode|base64encode|base64gzip|csvdecode|jsondecode|jsonencode|urlencode|yamldecode|yamlencode|abspath|dirname|pathexpand|basename|file|fileexists|fileset|filebase64|templatefile|formatdate|timeadd|timestamp|base64sha256|base64sha512|bcrypt|filebase64sha256|filebase64sha512|filemd5|filemd1|filesha256|filesha512|md5|rsadecrypt|sha1|sha256|sha512|uuid|uuidv5|cidrhost|cidrnetmask|cidrsubnet|tobool|tolist|tomap|tonumber|toset|tostring

contexts:
  main:
    - include: block-comments
    - include: inline-comments
    - include: literal-values
    - include: operators
    - include: brackets
    - include: attribute-definition
    - include: attribute-access
    - include: functions

  # Literal Values: Numbers, Language Constants, and Strings
  #
  #   Strings are _technically_ part of the "expression sub-language",
  #   but make the most sense to be part of this stack.
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#literal-values
  literal-values:
    - include: numeric-literals
    - include: language-constants
    - include: string-literals

  # Inline Comments: begin at the operator, end at the end of the line.
  #
  # https://www.terraform.io/docs/configuration/syntax.html#comments
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#comments-and-whitespace
  inline-comments:
    - match: '#|//'
      comment: Inline Comments
      scope: punctuation.definition.comment.terraform
      push:
        - meta_scope: comment.line.terraform
        - match: $\n?
          scope: punctuation.definition.comment.terraform
          pop: true

  # Block comments: start and end delimiters for multi-line comments.
  #
  # https://www.terraform.io/docs/configuration/syntax.html#comments
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#comments-and-whitespace
  block-comments:
    - match: /\*
      comment: Block comments
      scope: punctuation.definition.comment.terraform
      push:
        - meta_scope: comment.block.terraform
        - match: \*/
          scope: punctuation.definition.comment.terraform
          pop: true

  # Language Constants: booleans and `null`.
  #
  # https://www.terraform.io/docs/configuration/expressions.html#literal-expressions
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#literal-values
  language-constants:
    - match: \b(true|false|null)\b
      comment: Language Constants
      scope: constant.language.terraform

  # Numbers: Integers, fractions and exponents
  #
  # https://www.terraform.io/docs/configuration/expressions.html#types-and-values
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#numeric-literals
  numeric-literals:
    - match: \d+({{exponent}})\d+
      comment: Integer, no fraction, optional exponent
      scope: constant.numeric.float.terraform
      captures:
        1: punctuation.separator.exponent.terraform
    - match: \d+(\.)\d+(?:({{exponent}})\d+)?
      comment: Integer, fraction, optional exponent
      scope: constant.numeric.float.terraform
      captures:
        1: punctuation.separator.decimal.terraform
        2: punctuation.separator.exponent.terraform
    - match: \d+
      comment: Integers
      scope: constant.numeric.integer.terraform

  # Strings:
  #
  #   TODO: add heredocs
  #
  # https://www.terraform.io/docs/configuration/expressions.html#types-and-values
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#template-expressions
  string-literals:
    - match: '"'
      comment: Strings
      scope: punctuation.definition.string.begin.terraform
      push:
        - meta_scope: string.quoted.double.terraform
        - match: '"'
          scope: punctuation.definition.string.end.terraform
          pop: true
        - include: string-interpolation
        - match: '{{char_escapes}}'
          comment: Character Escapes
          scope: constant.character.escape.terraform

  # String Interpolation: ("${" | "${~") Expression ("}" | "~}"
  #
  #   TODO: include builtin variables
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#templates
  string-interpolation:
    - match: (\$|\%)\{
      comment: String interpolation
      scope: punctuation.section.interpolation.begin.terraform
      push:
        - meta_scope: meta.interpolation.terraform
        - clear_scopes: 1 # Clear the string.* scope.
        - match: \}
          scope: punctuation.section.interpolation.end.terraform
          pop: true
        - match: \~\s
          comment: Trim left whitespace
          scope: keyword.operator.template.left.trim.terraform
        - match: \s\~
          comment: Trim right whitespace
          scope: keyword.operator.template.right.trim.terraform
        - match: \b(if|else|endif|for|in|endfor)\b
          comment: if/else/endif and for/in/endfor directives
          scope: keyword.control.terraform
        - include: literal-values
        - include: attribute-access
        - include: operators
        - include: functions

  # Operators:
  #
  #   TODO: curly braces
  #   TODO: parenthesis
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#operators-and-delimiters
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#operations
  operators:
    - match: \>\=
      scope: keyword.operator.terraform
    - match: \<\=
      scope: keyword.operator.terraform
    - match: \=\=
      scope: keyword.operator.terraform
    - match: \!\=
      scope: keyword.operator.terraform
    - match: \+
      scope: keyword.operator.arithmetic.terraform
    - match: \-
      scope: keyword.operator.arithmetic.terraform
    - match: \*
      scope: keyword.operator.arithmetic.terraform
    - match: \/
      scope: keyword.operator.arithmetic.terraform
    - match: \%
      scope: keyword.operator.arithmetic.terraform
    - match: \&\&
      scope: keyword.operator.logical.terraform
    - match: \|\|
      scope: keyword.operator.logical.terraform
    - match: \!
      scope: keyword.operator.logical.terraform
    - match: \>
      scope: keyword.operator.terraform
    - match: \<
      scope: keyword.operator.terraform
    - match: \?
      scope: keyword.operator.terraform
    - match: \.\.\.
      scope: keyword.operator.terraform
    - match: "\\:"
      scope: keyword.operator.terraform

  # Brackets: include any expression + asterisk
  #
  #   TODO: include for-expression
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#index-operator
  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.terraform
      push:
        - match: \]
          scope: punctuation.section.brackets.end.terraform
          pop: true
        - match: (\*)\]
          comment: Full-splat operator
          scope: punctuation.section.brackets.end.terraform
          captures:
            1: keyword.operator.splat.terraform
          pop: true
        - match: \,
          scope: punctuation.separator.terraform
        - include: block-comments
        - include: inline-comments
        - include: literal-values
        - include: operators
        - include: tuple_for_expression
        - include: brackets
        - include: functions

  # Attribute Access: "." Identifier
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#attribute-access-operator
  attribute-access:
    - match: \.
      scope: punctuation.accessor.dot.terraform
      push:
        - match: "{{identifer}}"
          comment: Attribute access
          scope: variable.other.member.terraform
          pop: true
        - match: \*
          comment: Attribute-only splat
          scope: keyword.operator.splat.terraform
          pop: true

  # Attribute Definition: Identifier "=" Expression Newline
  #
  # The "=" operator cannot be immediately followed by "="
  # ">", as those are other operators, not attr definitions.
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#attribute-definitions
  attribute-definition:
    - match: (\()?({{identifer}})(\))?\s*(\=[^\=|\>])\s*
      comment: Identifier "=" with optional parens
      scope: variable.declaration.terraform
      captures:
        1: punctuation.section.parens.begin.terraform
        2: variable.other.readwrite.terraform
        3: punctuation.section.parens.end.terraform
        4: keyword.operator.assignment.terraform

  # Functions: Terraform builtins and unknown
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#functions-and-function-calls
  # https://www.terraform.io/docs/configuration/expressions.html#function-calls
  functions:
    - match: (({{predeclared_funcs}})|\b({{identifer}})\b)(\()
      comment: Built-in function calls
      captures:
        2: support.function.builtin.terraform
        3: variable.function.terraform
        4: punctuation.section.parens.begin.terraform
      push:
        - meta_scope: meta.function-call.terraform
        - match: \)
          scope: punctuation.section.parens.end.terraform
          pop: true
        - include: block-comments
        - include: inline-comments
        - include: literal-values
        - include: operators
        - include: brackets
        - include: attribute-access
        - include: functions
        - match: "{{identifer}}"
          comment: Parameters
          scope: variable.parameter.terraform
        - match: \,
          comment: Commas
          scope: punctuation.separator.terraform

  # Tuple for-Expression:
  #
  # "[" "for" Identifier ("," Identifier)? "in" Expression ":" Expression ("if" Expression)? "]";
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#for-expressions
  # https://www.terraform.io/docs/configuration/expressions.html#for-expressions
  tuple_for_expression:
    - match: \bfor\b
      comment: for expression (arrays)
      scope: keyword.control.terraform
      set:
        - match: \bin\b
          comment: in keyword
          scope: keyword.operator.word.terraform
        - match: '\:'
          scope: keyword.operator.terraform
        - include: literal-values
        - include: operators
        - include: brackets
        - include: attribute-access
        - include: functions
        - include: block-comments
        - include: inline-comments
        - match: \,
          comment: Commas
          scope: punctuation.separator.terraform
        - match: "{{identifer}}"
          comment: Local Identifiers
          scope: variable.other.readwrite.terraform
        - match: \]
          scope: punctuation.section.brackets.end.terraform
          pop: true

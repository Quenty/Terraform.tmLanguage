# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Terraform
scopeName: source.terraform
fileTypes: [tf, tfvars, hcl]
uuid: 9060ca81-906d-4f19-a91a-159f4eb119d6

variables:
  identifier: \b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b
  named_values: var|local|module|data|path|terraform
  terraform_known_blocks: resource|provider|variable|output|locals|module|data|terraform
  terraform_type_keywords: any|string|number|bool
  predeclared_funcs: abs|ceil|floor|log|max|min|pow|signum|chomp|format|formatlist|indent|join|lower|regex|regexall|replace|split|strrev|substr|title|trimspace|upper|chunklist|coalesce|coalescelist|compact|concat|contains|distinct|element|flatten|index|keys|length|list|lookup|map|matchkeys|merge|range|reverse|setintersection|setproduct|setunion|slice|sort|transpose|values|zipmap|base64decode|base64encode|base64gzip|csvdecode|jsondecode|jsonencode|urlencode|yamldecode|yamlencode|abspath|dirname|pathexpand|basename|file|fileexists|fileset|filebase64|templatefile|formatdate|timeadd|timestamp|base64sha256|base64sha512|bcrypt|filebase64sha256|filebase64sha512|filemd5|filemd1|filesha256|filesha512|md5|rsadecrypt|sha1|sha256|sha512|uuid|uuidv5|cidrhost|cidrnetmask|cidrsubnet|tobool|tolist|tomap|tonumber|toset|tostring

patterns:
- include: '#comments'
- include: '#literal_values'

repository:
  comments:
    patterns:
    - include: '#inline_comments'
    - include: '#block_comments'

  expressions:
    patterns:
    - include: '#literal_values'

  literal_values:
    patterns:
      - include: '#numeric_literals'
      - include: '#language_constants'
      - include: '#string_literals'

  inline_comments:
    comment: Inline comments
    name: comment.line.terraform
    begin: '#|//'
    beginCaptures:
      '0': { name: punctuation.definition.comment.terraform }
    end: "$\n?"

  block_comments:
    comment: Block comments
    name: comment.block.terraform
    begin: /\*
    beginCaptures:
      '0': { name: punctuation.definition.comment.terraform }
    end: \*/
    endCaptures:
      '0': { name: punctuation.definition.comment.terraform }

  language_constants:
    comment: Language Constants
    name: constant.language.terraform
    match: \b(true|false|null)\b

  numeric_literals:
    patterns:
      - comment: Integer, no fraction, optional exponent
        name: constant.numeric.float.terraform
        match: '\d+(([Ee][+-]?))\d+'
        captures:
          '1': { name: punctuation.separator.exponent.terraform }
      - comment: Integer, fraction, optional exponent
        name: constant.numeric.float.terraform
        match: \d+(\.)\d+(?:(([Ee][+-]?))\d+)?
        captures:
          '1': { name: punctuation.separator.decimal.terraform }
          '2': { name: punctuation.separator.exponent.terraform }
      - comment: Integers
        name: constant.numeric.integer.terraform
        match: \d+

  string_literals:
    comment: Strings
    name: string.quoted.double.terraform
    begin: '"'
    beginCaptures:
      '0': { name: punctuation.definition.string.begin.terraform }
    end: '"'
    endCaptures:
      '0': { name: punctuation.definition.string.end.terraform }
    patterns:
      - include: '#string_interpolation'
      - comment: Character Escapes
        match: \\[nrt"\\]|\\u(\h{8}|\h{4})
        name: constant.character.escape.terraform

  string_interpolation:
    comment: String interpolation
    name: meta.interpolation.terraform
    begin: '(\$|\%)\{'
    beginCaptures:
      '0': { name: punctuation.section.interpolation.begin.terraform }
    end: \}
    endCaptures:
      '0': { name: punctuation.section.interpolation.end.terraform}
    patterns:
      - comment: Trim left whitespace
        name: keyword.operator.template.left.trim.terraform
        match: \~\s
      - comment: Trim right whitespace
        name: keyword.operator.template.right.trim.terraform
        match: \s\~
      - comment: if/else/endif and for/in/endfor directives
        name: keyword.control.terraform
        match: \b(if|else|endif|for|in|endfor)\b
      - include: '#expressions'


# - name: meta.resource.terraform
#   match: (resource|data)\s+(")?(\w+)(")?\s+(")?([\w\-]+)(")?\s+({)
#   foldingStartMarker: '\{\s*$'
#   foldingStopMarker: '^\s*\}'
#   captures:
#     '1': {name: storage.type.function.terraform}
#     '2': {name: string.terraform punctuation.definition.string.begin.terraform}
#     '3': {name: string.value.terraform}
#     '4': {name: string.terraform punctuation.definition.string.end.terraform}
#     '5': {name: string.terraform punctuation.definition.string.begin.terraform}
#     '6': {name: string.value.terraform}
#     '7': {name: string.terraform punctuation.definition.string.end.terraform}
#     '8': {name: punctuation.definition.tag.terraform}

# - match: (provider|provisioner|variable|output|module|atlas)\s+(")?([\w\-]+)(")?\s+({)
#   foldingStartMarker: '\{\s*$'
#   foldingStopMarker: '^\s*\}'
#   captures:
#     '1': {name: storage.type.function.terraform}
#     '2': {name: string.terraform punctuation.definition.string.begin.terraform}
#     '3': {name: string.value.terraform}
#     '4': {name: string.terraform punctuation.definition.string.end.terraform}
#     '5': {name: punctuation.definition.tag.terraform}

# - comment: Value assignments (left hand side not in double quotes)
#   match: ([\w_-]+)\s*(=)\s*
#   captures:
#     '1': {name: variable.other.assignment.terraform}
#     '2': {name: keyword.operator.terraform}

# - comment: Value assignments (left hand side in double quotes)
#   match: (")([\w_-]+)(")\s*(=)\s*
#   captures:
#     '1': {name: punctuation.quote.double.terraform}
#     '2': {name: variable.assignment.terraform}
#     '3': {name: punctuation.quote.double.terraform}
#     '4': {name: keyword.operator.terraform}

# - comment: Maps
#   match: ([\w\-_]+)\s+({)
#   captures:
#     '1': {name: entity.name.section.terraform}
#     '2': {name: punctuation.definition.tag.terraform}

# - name: string.unquoted.heredoc.terraform
#   begin: (?>\s*<<(\w+))
#   beginCaptures:
#     '0': {name: punctuation.definition.string.begin.terraform}
#     '1': {name: keyword.operator.heredoc.terraform}
#   end: ^\s*\1$
#   endCaptures:
#     '0': {name: punctuation.definition.string.end.terraform keyword.operator.heredoc.terraform}
